import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppDispatch, AppThunk } from "../store";
import axios from "axios";

interface UserinfoInter {
  id?: NumberConstructor;
  username?: string;
  role?: "admin" | "user";
  exp?: number;
  iat?: number;
}

export interface UserinfoState {
  userinfo?: UserinfoInter;
  token?: string;
}

const initialState: UserinfoState = {
  userinfo: undefined,
  token: window.localStorage.getItem("token")
    ? (window.localStorage.getItem("token") as string)
    : undefined,
};

export const verifyTokenAsync = createAsyncThunk(
  "userinfo/verifyToken",
  async () => {
    const res = await axios.get("/users/verify1");
    // The value we return becomes the `fulfilled` action payload
    return res.data;
  }
);

export const userinfoSlice = createSlice({
  name: "userinfo",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(verifyTokenAsync.fulfilled, (state, action) => {
      state.userinfo = action.payload;
    });
  },
});

export const selectUserinfo = (state: RootState) => state.userinfo.value;

export const selectToken = (state: RootState) => state.userinfo.token;
