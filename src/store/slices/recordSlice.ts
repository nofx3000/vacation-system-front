import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppDispatch, AppThunk } from "../store";
import axios from "axios";
import { RecordInter, PhaseInter } from "../../interface/RecordInterface";

export interface RecordState {
  recordsByPersonId: RecordInter[];
  recordStatus: "default" | "add" | "edit";
  phaseStatus: "default" | "add" | "edit";
  tmpPhaseGroup: PhaseInter[];
  currentPersonId?: number;
}

const initialState: RecordState = {
  recordsByPersonId: [],
  recordStatus: "default",
  phaseStatus: "default",
  tmpPhaseGroup: [],
  currentPersonId: undefined,
};

type recordStatusActionType = {
  payload: "default" | "add" | "edit";
  type: string;
};

type addRecordGroupActionType = { payload: PhaseInter; type: string };

export const getRecordsByPersonIdAsync = createAsyncThunk(
  "record/getRecordsByPersonId",
  async (id: number) => {
    const res = await axios.get(`/record/${id}`);
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const RecordSlice = createSlice({
  name: "record",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setCurrentPersonId: (state, action) => {
      state.currentPersonId = action.payload;
    },
    changeRecordStatus: (state, action: recordStatusActionType) => {
      state.recordStatus = action.payload;
    },
    addTmpPhaseGroup: (state, action: addRecordGroupActionType) => {
      state.tmpPhaseGroup.push(action.payload);
    },
    delLastTmpPhase: (state) => {
      state.tmpPhaseGroup.pop();
    },
    delTmpPhaseById: (state, action) => {
      state.tmpPhaseGroup = state.tmpPhaseGroup.filter((item, index) => {
        return index !== action.payload;
      });
    },
    editTmpPhaseById: (state, action) => {
      state.tmpPhaseGroup = state.tmpPhaseGroup.map((phase, index) => {
        if (index === action.payload.index) {
          return action.payload.data;
        }
        return phase;
      });
    },
    resetTmpPhaseById: (state) => {
      state.tmpPhaseGroup = [];
    },
    resetRecordsByPersonId: (state) => {
      state.recordsByPersonId = [];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getRecordsByPersonIdAsync.fulfilled, (state, action) => {
      state.recordsByPersonId = action.payload;
    });
    builder.addCase(getRecordsByPersonIdAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getting recordList failed");
    });
  },
});

export const {
  changeRecordStatus,
  addTmpPhaseGroup,
  setCurrentPersonId,
  delLastTmpPhase,
  delTmpPhaseById,
  editTmpPhaseById,
  resetTmpPhaseById,
  resetRecordsByPersonId,
} = RecordSlice.actions;

// !!!CAUTION!!! select中state后面要接reducer名，而不是slice名
export const selectRecordsByPersonId = (state: RootState) =>
  state.recordReducer.recordsByPersonId;

export const selectRecordStatus = (state: RootState) =>
  state.recordReducer.recordStatus;

export const selectPhaseStatus = (state: RootState) =>
  state.recordReducer.phaseStatus;

export const selectTmpPhaseGroup = (state: RootState) =>
  state.recordReducer.tmpPhaseGroup;

export const selectCurrentPersonId = (state: RootState) =>
  state.recordReducer.currentPersonId;

export default RecordSlice.reducer;
