import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppDispatch, AppThunk } from "../store";
import axios from "axios";
import { RecordInter, PhaseInter } from "../../interface/RecordInterface";
import { PersonInfoInter } from "../../interface/PeopleInterface";
export interface RecordState {
  recordsByPersonId: RecordInter[];
  recordStatus: "default" | "add" | "edit";
  phaseStatus: "default" | "add" | "edit";
  tmpPhaseGroup: PhaseInter[];
  currentDivisionId?: number;
  currentPersonId?: number;
  currentPersonInfo?: PersonInfoInter;
  showAdding: boolean;
  recordId?: number;
}

const initialState: RecordState = {
  recordsByPersonId: [],
  recordStatus: "default",
  phaseStatus: "default",
  tmpPhaseGroup: [],
  currentDivisionId: undefined,
  currentPersonId: undefined,
  showAdding: true,
  recordId: undefined,
};

type recordStatusActionType = {
  payload: "default" | "add" | "edit";
  type: string;
};

type addRecordGroupActionType = { payload: PhaseInter; type: string };

export const getRecordsByPersonIdAsync = createAsyncThunk(
  "record/getRecordsByPersonId",
  async (id: number) => {
    const res = await axios.get(`/record/person/${id}`);
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const getPersonInfoAsync = createAsyncThunk(
  "record/getPersonInfo",
  async (id: number) => {
    const res = await axios.get(`/people/${id}`);
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const getRecordByIdAsync = createAsyncThunk(
  "record/getRecordById",
  async (id: number) => {
    const res = await axios.get(`/record/${id}`);
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const RecordSlice = createSlice({
  name: "record",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setCurrentPersonId: (state, action) => {
      state.currentPersonId = action.payload;
    },
    setCurrentDivisionId: (state, action) => {
      state.currentDivisionId = action.payload;
    },
    changeRecordStatus: (state, action: recordStatusActionType) => {
      state.recordStatus = action.payload;
    },
    addTmpPhaseGroup: (state, action: addRecordGroupActionType) => {
      state.tmpPhaseGroup.push(action.payload);
    },
    delLastTmpPhase: (state) => {
      state.tmpPhaseGroup.pop();
    },
    delTmpPhaseById: (state, action) => {
      state.tmpPhaseGroup = state.tmpPhaseGroup.filter((item, index) => {
        return index !== action.payload;
      });
    },
    editTmpPhaseById: (state, action) => {
      state.tmpPhaseGroup = state.tmpPhaseGroup.map((phase, index) => {
        if (index === action.payload.index) {
          return action.payload.data;
        }
        return phase;
      });
    },
    resetTmpPhaseById: (state) => {
      state.tmpPhaseGroup = [];
    },
    resetRecordsByPersonId: (state) => {
      state.recordsByPersonId = [];
    },
    setShowAdding: (state, action) => {
      state.showAdding = action.payload;
    },
    resetCurrentPerson: (state) => {
      state.currentPersonId = undefined;
    },
    resetRecordId: (state) => {
      state.recordId = undefined;
    },
    setDeleteTag: (state, action) => {
      state.tmpPhaseGroup = state.tmpPhaseGroup.map((phase, index) => {
        if (index === action.payload) {
          phase.delete_tag = true;
          return phase;
        }
        return phase;
      });
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getRecordsByPersonIdAsync.fulfilled, (state, action) => {
      state.recordsByPersonId = action.payload;
    });
    builder.addCase(getRecordsByPersonIdAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getting recordList failed");
    });
    builder.addCase(getPersonInfoAsync.fulfilled, (state, action) => {
      state.currentPersonInfo = action.payload;
    });
    builder.addCase(getPersonInfoAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getting personInfo failed");
    });
    builder.addCase(getRecordByIdAsync.fulfilled, (state, action) => {
      let phases: PhaseInter[] = [];
      const formatPhaseDate = (phases: PhaseInter[]) => {
        // 后端获取phase数据start_at和end_at格式为string
        // 按照interface约定应转换为Date对象
        return phases.map((phase) => {
          phase.start_at = new Date(phase.start_at as any);
          phase.end_at = new Date(phase.end_at as any);
          return phase;
        });
      };
      if (action.payload.phase) {
        phases = formatPhaseDate(action.payload.phase);
      }
      // 如果获取的record数据带有id， 说明已经创建， 则保存为当前recordId
      if (action.payload.id) {
        state.recordId = action.payload.id;
      }
      // 将获取的日程信息保存至tmpPhaseGroup
      state.tmpPhaseGroup = phases;
      // state.recordsByPersonId = action.payload;
    });
    builder.addCase(getRecordByIdAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getting recordById failed");
    });
  },
});

export const {
  changeRecordStatus,
  addTmpPhaseGroup,
  setCurrentPersonId,
  delLastTmpPhase,
  delTmpPhaseById,
  editTmpPhaseById,
  resetTmpPhaseById,
  resetRecordsByPersonId,
  setShowAdding,
  resetCurrentPerson,
  resetRecordId,
  setDeleteTag,
  setCurrentDivisionId,
} = RecordSlice.actions;

// !!!CAUTION!!! select中state后面要接reducer名，而不是slice名
export const selectRecordsByPersonId = (state: RootState) =>
  state.recordReducer.recordsByPersonId;

export const selectRecordStatus = (state: RootState) =>
  state.recordReducer.recordStatus;

export const selectPhaseStatus = (state: RootState) =>
  state.recordReducer.phaseStatus;

export const selectTmpPhaseGroup = (state: RootState) =>
  state.recordReducer.tmpPhaseGroup;

export const selectCurrentPersonId = (state: RootState) =>
  state.recordReducer.currentPersonId;

export const selectCurrentDivisionId = (state: RootState) =>
  state.recordReducer.currentDivisionId;

export const selectCurrentPersonInfo = (state: RootState) =>
  state.recordReducer.currentPersonInfo;

export const selectShowAdding = (state: RootState) =>
  state.recordReducer.showAdding;

export const selectRecordId = (state: RootState) =>
  state.recordReducer.recordId;

export default RecordSlice.reducer;
