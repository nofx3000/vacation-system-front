import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppDispatch, AppThunk } from "../store";
import axios from "axios";
import { RecordInter, PhaseInter } from "../../interface/RecordInterface";

export interface RecordState {
  recordsByPersonId: RecordInter[];
}

const initialState: RecordState = {
  recordsByPersonId: [],
};

export const getRecordsByPersonIdAsync = createAsyncThunk(
  "record/getRecordsByPersonId",
  async (id: number) => {
    const res = await axios.get(`/record/${id}`);
    console.log(res);
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const RecordSlice = createSlice({
  name: "record",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getRecordsByPersonIdAsync.fulfilled, (state, action) => {
      state.recordsByPersonId = action.payload;
    });
    builder.addCase(getRecordsByPersonIdAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getting recordList failed");
    });
  },
});

// !!!CAUTION!!! select中state后面要接reducer名，而不是slice名
export const selectRecordsByPersonId = (state: RootState) =>
  state.recordReducer.recordsByPersonId;

export default RecordSlice.reducer;
