import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppDispatch, AppThunk } from "../store";
import axios from "axios";

export interface PersonInfoInter {
  id?: number;
  name?: string;
  catatory?: number;
  work_age?: number;
  total_holiday?: number;
  spent_holiday?: number;
  division_id?: number;
  married?: boolean;
  not_with_parent?: boolean;
  not_with_partner?: boolean;
  comment?: string;
}

export interface DivisionInter {
  id: number;
  name: string;
  people: PersonInfoInter[];
}

export interface PeopleState {
  peopleInfoByDivison: DivisionInter[];
}

const initialState: PeopleState = {
  peopleInfoByDivison: [],
};

export const getPeopleInfoListAsync = createAsyncThunk(
  "people/getPeopleInfo",
  async () => {
    const res = await axios.get("/people/");
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const addPersonInfoAsync = createAsyncThunk(
  "people/addPersonInfo",
  async (personinfo: PersonInfoInter) => {
    const res = await axios.post("people/add", personinfo);
    if (res.data.errno) {
      throw Error(res.data.message);
    }
    return res;
  }
);

export const PeopleSlice = createSlice({
  name: "people",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getPeopleInfoListAsync.fulfilled, (state, action) => {
      state.peopleInfoByDivison = action.payload;
    });
    builder.addCase(getPeopleInfoListAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getting peopleInfoList failed");
    });
    builder.addCase(addPersonInfoAsync.fulfilled, (state, action) => {
      console.log("add personinfo success", action.payload);
    });
    builder.addCase(addPersonInfoAsync.rejected, (state, action) => {
      console.error(action.error.message);
    });
  },
});

// !!!CAUTION!!! select中state后面要接reducer名，而不是slice名
export const selectPeopleInfoByDivison = (state: RootState) =>
  state.peopleReducer.peopleInfoByDivison;

export default PeopleSlice.reducer;
